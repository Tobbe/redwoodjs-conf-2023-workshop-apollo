datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Artist {
  id            String        @id @default(cuid())
  name          String
  followerCount Int           @default(0)
  shallow       Boolean       @default(false)
  albums        Album[]
  tracks        Track[]
  images        ArtistImage[]
}

model ArtistImage {
  id       String @id @default(cuid())
  url      String @unique
  height   Int?
  width    Int?
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String
}

model Album {
  id                   String       @id @default(cuid())
  name                 String
  albumType            String       @default("album")
  artists              Artist[]
  releaseDate          String
  releaseDatePrecision String
  shallow              Boolean      @default(false)
  images               AlbumImage[]
  tracks               Track[]
  copyrights           Copyright[]
  savedAlbums          SavedAlbum[]
}

model AlbumImage {
  id      String @id @default(cuid())
  url     String @unique
  height  Int?
  width   Int?
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String
}

model Copyright {
  id      String @id @default(cuid())
  text    String
  album   Album  @relation(fields: [albumId], references: [id])
  albumId String
  type    String

  @@unique([albumId, text, type])
}

model Device {
  id            String         @id @default(cuid())
  name          String
  type          String
  isActive      Boolean        @default(false)
  volumePercent Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  playbackState PlaybackState?

  @@unique([name, type, userId])
}

model PlaybackState {
  id         String  @id @default(cuid())
  isPlaying  Boolean @default(false)
  contextUri String?
  // off, track, context
  repeatMode String  @default("OFF")
  shuffled   Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])
  userId     String  @unique
  device     Device  @relation(fields: [deviceId], references: [id])
  deviceId   String  @unique
}

model Playlist {
  id     String          @id @default(cuid())
  name   String
  tracks PlaylistTrack[]
  owner  User            @relation(fields: [userId], references: [id])
  images PlaylistImage[]
  userId String
}

model PlaylistImage {
  id         String   @id @default(cuid())
  url        String   @unique
  height     Int?
  width      Int?
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String
}

model PlaylistTrack {
  addedAt    DateTime
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  track      Track    @relation(fields: [trackId], references: [id])
  trackId    String
  addedBy    User     @relation(fields: [addedById], references: [id])
  addedById  String

  @@id([playlistId, trackId])
}

model SavedAlbum {
  addedAt DateTime @default(now())
  album   Album    @relation(fields: [albumId], references: [id])
  albumId String
  user    User     @relation(fields: [userId], references: [id])
  userId  String

  @@id([albumId, userId])
}

model SavedTrack {
  addedAt DateTime @default(now())
  track   Track    @relation(fields: [trackId], references: [id])
  trackId String
  user    User     @relation(fields: [userId], references: [id])
  userId  String

  @@id([trackId, userId])
}

model Track {
  id             String          @id @default(cuid())
  album          Album           @relation(fields: [albumId], references: [id])
  albumId        String
  artists        Artist[]
  discNumber     Int             @default(1)
  durationMs     Int
  explicit       Boolean
  name           String
  popularity     Int             @default(0)
  trackNumber    Int
  shallow        Boolean         @default(false)
  savedTracks    SavedTrack[]
  playlistTracks PlaylistTrack[]
}

model User {
  id             String          @id @default(cuid())
  devices        Device[]
  displayName    String?         @unique
  playlists      Playlist[]
  images         UserImage[]
  playlistTracks PlaylistTrack[]
  playbackState  PlaybackState?
  savedAlbums    SavedAlbum[]
  savedTracks    SavedTrack[]
}

model UserImage {
  id     String @id @default(cuid())
  url    String @unique
  height Int?
  width  Int?
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
